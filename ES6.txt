1:30 - 
###############################################################################
You Don't Know JS: ES6 & Beyond - http://dl.finebook.ir/book/8f/13126.pdf
###############################################################################

SHORTHAND OBJECT DEFINITION

	var foo = [1,2,3];

	var obj = {
		foo
	};

	console.log(obj);
	// {foo:[1,2,3]}

BLOCK SCOPING
	IMPLICIT
		var a = 2

		{
			let a = 3, b, c = a;
			console.log(a); // 3
		}

	FOR LOOP
		for (let i = 0; i < 5; i++) {
			// A new i is initialized every time, 
			// so if that reference is used in the future
			// when the value has changed, it remains the same
		}

	CONSTANTS
		const a = 2;
			- Restriction is on the setting of the reference, not of
			the values of the reference.
		const GLOBAL_VARIABLE

SPREAD/REST
	function test(a,b,c) {
		console.log(a,b,c);
	}

	test(...[1,2,3]); // 1, 2, 3

	Similar to test.apply(null, [1,2,3]);

	var ott = [1,2,3];
	var list = [0,...ott,5];

	function gatherInputs(a,b,...c) {
		console.log(c);
	}
	gatherInputs(1,2,6,7,8); // [6,7,8]

	function sample (name, ...args) {} // args is a "rest" parameter


DEFAULT PARAMETERS
	function test(a=1, b) {
		console.log(a);
	}
	test(); // 1
	test(undefined, 6); // 1
	test(null); // 0 (null coerces to 0)

DEFAULT VALUE EXPRESSIONS
	function addTwo(num) {return num +2};

	function test (x, y = addTwo(x)) {
		console.log(x, y);
	}

	test(1); // 1, 3
	test (1, 6); // 1, 6
	-	Expressions are lazily evaluated

	function ajaxStuff(url, cb = function(){}){
		//Do work here
		cb(); // CB is no op empty function
	};

DESTRUCTURING 
	- Left hand style assignment where you define a pattern

	function giveMeAnArray () {
		return [1,2,3];
	}

	function giveMeAnObject () {
		return {
			x:1,
			y:2,
			z:3
		};
	}

	var [a,b,c] = giveMeAnArray();
	console.log(a,b,c); // 1 2 3

	// SYNTAX IS source --> target (OPPOSITE OF USUAL target = source declaration)
	var {x:thing, y:otherThing, z: thirdThing} = giveMeAnObject();
	console.log(thing, otherThing, thirdThing); // 1 2 3

	var {x,y,z} = giveMeAnObject; // If using the same property names, can use this shorthand

	NON DECLARATIONS
		[a,b,c] = giveMeAnArray();

		({x,y,z} = giveMeAnObject()); // Has to be wrapped in () so not taken as a statement block

		MAP AN OBJECT TO ARRAY
			var testObj = {a:1, b:2, c:3}, testArray = [];
			({a: testArray[0], b: testArray[1], c: testArray[2]} = testObj)
			console.log(testArray); // [1,2,3]

		ARRAY TO OBJECT
			var testObj = {}, testArray = [1,2,3];
			[testObj.a, testObj.b, testObj.c] = testArray;
			console.log(testObj); // {a:1,b:2, c:3}

		VARIABLE SWAP
			var x= 10, y = 20;
			[y,x] = [x,y];
			console.log(x,y); // 20,10


	DESTRUCTURING ASSIGNMENT EXPRESSIONS
		var o = [1,2,3], a,b,c,p;
		p = [a,b,c] = o;
		console.log(a,b,c); // 1 2 3 (a,b,c are assigned along the way)
		p === o; //true

	TOO MANY, TOO FEW PROPERTIES
		DONT HAVE TO USE ALL THE PROPERTIES
			var {x} = giveMeAnObject();
			console.log(x); // 1

		REST/GATHER
			SPREADS OUT IN ASSIGNMENT
				var a = [1,...giveMeAnArray(),5]; 
			GATHERS IN
				var a = [1,2,3];
				var [b, ...c] = a;
				console.log(b,c); // 2, [1,2,3]

		DEFAULT VALUE ASSIGNMENT
			var {w=20, x=1, y=2} = giveMeAnObject();
			console.log(w,x,y); // 20, 1, 2

		NESTED DESTRUCTURING
			 	var App = {
			 		model:{
			 			User:function(){}
			 		} 
			 	};

			// instead of var User = App.model.User
			var {model:{User}} = App;

		DESTRUCTURING PARAMETERS/NAMED ARGUEMENTS
			NAMED PARAMS!!!
				function foo({x,y}) {
					console.log(x,y)
				};
				foo({x:1, y:2}); // 1 2
			NAMED PARAMS WITH DEFAULT VALUES
				function foo({x=10} = {}) {
					console.log(x)
				}
				foo(); // 10
				foo({x:12}); // 12 


		NESTED DEFAULTS
			var defaults = {
				options:{
					debug:true,
					enable:false
				},
				log: {
					warn: false
				}
			};

			var config = {
				options: {
					debug: false
				}
			};

			// Merge defaults into config
			{
				// Destructure
				let {
					options: {
						remove = defaults.options.remove,
						enable = defaults.options.enable,
						instance = defaults.options.instance
					}, = {},
					log: {
						warn = defaults.log.warn,
						error = defaults.log.error
					}, = {}
				} = config;
				// Restructure
				config = {
					options: {remove, enable, instance},
					log: {warn, error} // Concise syntax
				}

			}
	OBJECT LITERAL EXTENSIONS
		// 	ES5
		var app = {
			x: function(){},
			x: function(a){}
		}
		//	ES6
		var app = {
			x(){},
			y({)}, // Function concise format
			*generatorExample(){} // Generator concise format
		}''

		// ES5 DEFINE PROPERTIES THAT ARE SELF REFERENCABLE

		var app = {
			doWork: function doWork() {
				/* Declaring the property makes it publicly available and tells
				how to call it. Naming the function doWork allows it to be referenced from itself
				doWork();
			}
		}

		// ES6 - don't try to use concise format, it assumes anonymous function naming
	ES5 GETTER/SETTER
		var o = {
			_id:10,
			get id() {return this._id++},
			set id(val) {this._id = val}
		}
